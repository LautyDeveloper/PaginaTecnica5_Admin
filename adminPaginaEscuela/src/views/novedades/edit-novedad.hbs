<style>
    * {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
  font-family: sans-serif;
}

body {
  min-height: 90vh;
  display: grid;
  text-align: center;
  background-color: whitesmoke;
}

nav{
    background-color: #0c2795;
    width: 100vw;
    height: 100px;
    display: grid;
    color: white;
    font-size: 1.4rem;
    font-family: Arial, Helvetica, sans-serif;
}
nav a{
    color: white;
    text-decoration: none;
    background-color: orangered;
    padding: 10px 10px;
    border-radius: 30px;
}
nav a:hover{
    background-color: #ae2c00;
}
nav div{
    display: flex;
    justify-content: space-around;
    align-items: center;
}
nav div div{
    display: flex;
    gap: 10px;
}

nav div h1{
    font-size: 25px;
    display: none;
}

@media(min-width: 600px){
    nav div a{
        padding: 15px 20px;
    }
    
    nav div h1{
        font-size: 35px;
        display: block;
    }
}

@media(min-width: 600px){

    .container form{
        width: 600px;
    }
}
    h3{
        color: orangered;
        font-size: 1.4rem;
        font-weight: 700;
        font-family: Arial, Helvetica, sans-serif   ;
        margin-top: 30px;
        margin-bottom: 30px;
    }
    .container{
        display: grid;
        place-items: center;
    }
    form{
        display: grid;
        width: 95%;
        background-color: rgb(0, 0, 79);
        border-radius: 30px;
        padding: 30px;
        gap: 20px;
    }
    form button{
        background-color: orangered;
        border-radius: 20px;
        border: none;
        outline: none;
        color: white;
        font-size: 1.2rem;
        font-weight: 700;
        padding: 15px 10px;
    }

    form button:hover{
        background-color: #ae2c00;
    }

    form div{
        display: grid;
        gap: 20px;
    }
    form div label{
        color: orangered;
        font-size: 1.3rem;
        font-weight: 700;
        font-family: Arial, Helvetica, sans-serif   ;
        text-align: left;
    }

    form div input, textarea{
        width: 100%;
        border: none;
        outline: none;
        border-radius: 30px;
        padding-left: 10px;
        padding: 20px 10px;
        resize: none;
        background-color: rgb(2, 31, 194);
        color: white;
        font-weight: 600;
    }
    form div input::placeholder, textarea::placeholder{
        color: white;
    }

    form div .corta{
        height: 50px;
    }
    
    form div .larga{
        height: 300px;
    }

    .modal {
    display: none;
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    overflow: auto;
    background-color: rgba(0, 0, 0, 0.5);
  }

  .modal-content {
    background-color: #fefefe;
    margin: 15% auto;
    padding: 20px;
    border: 1px solid #888;
        border-radius: 20px;
    width: 400px;
    height: 250px;
    text-align: center;
    display: flex;
    flex-direction: column;
    justify-content: space-around;
    border-radius: 20px;
  }

  .hidden {
    display: none;
  }
  .modal-footer {
  text-align: center;
}

.modal-footer button {
  padding: 8px 16px;
  font-size: 14px;
  color: #fff;
  background-color: #007bff;
  border: none;
  border-radius: 5px;
  cursor: pointer;
}

.modal-footer button:hover {
  background-color: #0056b3;
}
.modal-header{
  color: orangered;
  font-size: 1.2rem;
  font-weight: 600;
}
.modal-body, #modalBody{
  font-size: 1.1rem;
}
#modalTitle{
    margin: 0;
    padding: 0;
}
#closeModalButton, #closeModal{
  font-size: 1.3rem;
}
</style>

<h3 class="text-uppercase">EDITANDO UNA NOVEDAD</h3>
<div class="container">
<form action="/edit-novedad/{{novedad.idNovedad}}" method="POST">
    <div>
        <label for="novedad">Novedad</label>
        <input type="text" name="novedad" id="novedad" value="{{novedad.novedad}}" autofocus required>
    </div>
        <div>
            <label for="imagenUrl">Imagen</label>
            <input type="file" name="imagen" id="imagenUrl" accept="image/*">
            <p>Imagen actual: <img src="{{novedad.imagenUrl}}" alt="Imagen actual" style="max-width: 150px; display: block;"></p>
            <input type="hidden" name="imagenActual" value="{{novedad.imagenUrl}}">
        </div>
    <div>
        <label for="descripcion">Descripción Resumida</label>
        <textarea name="descripcion" id="descripcion" class="corta" required>{{novedad.descripcion}}</textarea>
    </div>   

    <div>
        <label for="descripcionLarga">Descripción</label>
        <textarea name="descripcionLarga" id="descripcionLarga" class="larga" required>{{novedad.descripcionLarga}}</textarea>
    </div>                                    
    <button id="updateButton"> Actualizar </button>
                        
</form>
    <div class="modal" id="messageModal">
        <div class="modal-content">
            <h3 id="modalTitle">Mensaje</h3>
            <p id="modalBody"></p>
            <div class="modal-footer">
                <button id="closeModal">Cerrar</button>
            </div>
        </div>
    </div>
</div>

<script>
document.addEventListener("DOMContentLoaded", () => {
  const updateButton = document.getElementById("updateButton");
  const modal = document.getElementById("messageModal");
  const closeModal = document.getElementById("closeModal");
  const modalTitle = document.getElementById("modalTitle");
  const modalBody = document.getElementById("modalBody");
  const form = document.querySelector("form");

  // Función de validación de novedades
  const validateNovedad = ({ novedad, descripcion, descripcionLarga }) => {
    if (!novedad || novedad.length > 60) {
      return "El título no puede superar los 60 caracteres.";
    }
    if (!descripcion || descripcion.length > 70) {
      return "La descripción no puede superar los 70 caracteres.";
    }
    if (!descripcionLarga || descripcionLarga.length < 90) {
      return "La descripción larga debe tener al menos 90 caracteres.";
    }
    return null; // Sin errores
  };

  form.addEventListener("submit", async (e) => {
    e.preventDefault(); // Prevenir recarga de la página

    // Crear un FormData para extraer los datos del formulario
    const formData = new FormData(form);

    // Validar los campos antes de enviar
    const validationError = validateNovedad({
      novedad: formData.get("novedad"),
      descripcion: formData.get("descripcion"),
      descripcionLarga: formData.get("descripcionLarga"),
    });

    if (validationError) {
      modalTitle.textContent = "Error de validación";
      modalBody.textContent = validationError;
      modal.style.display = "flex";
      return;
    }

    try {
      // Enviar los datos al servidor
      const response = await fetch(form.action, {
        method: "POST",
        body: formData,
      });

      if (response.ok) {
        modalTitle.textContent = "Éxito";
        modalBody.textContent = "La novedad se actualizó correctamente.";
        modal.style.display = "flex";

        setTimeout(() => {
          window.location.href = "/novedades"; // Redirigir después de 2 segundos
        }, 2000);
      } else {
        const error = await response.json();
        modalTitle.textContent = "Error";
        modalBody.textContent =
          error.errors?.join(", ") || "Ocurrió un problema al actualizar.";
        modal.style.display = "flex";
      }
    } catch (err) {
      console.error(err);
      modalTitle.textContent = "Error";
      modalBody.textContent = "Hubo un problema con la conexión.";
      modal.style.display = "flex";
    }
  });

  closeModal.addEventListener("click", () => {
    modal.style.display = "none";
    window.location.href = "/novedades";
  });
});
</script>
