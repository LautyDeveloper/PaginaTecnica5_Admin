<style>
    h3 {
        color: orangered;
        font-size: 1.4rem;
        font-weight: 700;
        font-family: Arial, Helvetica, sans-serif;
    }
    .container {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        width: 500px;
        height: 620px;
        background-color: rgb(0, 0, 79);
        border-radius: 20px;
    }
    form {
        width: 80%;
        height: 80%;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: space-around;
    }
    form button {
        background-color: orangered;
        width: 90%;
        height: 30px;
        border-radius: 20px;
        border: none;
        outline: none;
        color: white;
        font-size: 1.2rem;
        font-weight: 700;
    }
    form div {
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        align-items: center;
        width: 90%;
    }
    form div label {
        color: orangered;
        font-size: 1.2rem;
        font-weight: 700;
    }
    form div input, textarea {
        width: 100%;
        height: 30px;
        border: none;
        outline: none;
        padding-left: 10px;
        resize: none;
        background-color: rgb(2, 31, 194);
        color: white;
        font-weight: 600;
    }
    form div input::placeholder, textarea::placeholder {
        color: white;
    }
    form div .corta {
        height: 50px;
    }
    form div .larga {
        height: 300px;
    }

        /* Estilos del modal */
        .modal {
            display: none; /* Oculto por defecto */
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.4);
            justify-content: center;
            align-items: center;
        }
        .modal-content {
            background-color: #fefefe;
            padding: 20px;
            border: 1px solid #888;
            width: 80%;
            max-width: 400px;
            text-align: center;
            border-radius: 8px;
            display: flex;
            flex-direction: column;
            justify-content: space-evenly;
            align-items: center;
            height: 200px;
        }
        .modal-footer button {
            padding: 8px 16px;
            font-size: 14px;
            color: #fff;
            background-color: #007bff;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }
        .modal-footer button:hover {
            background-color: #0056b3;
        }
        .close-button {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
        }
</style>

<h3 class="text-uppercase">EDITANDO UNA NOVEDAD</h3>
<div class="container">
    <form action="/edit-novedad/{{novedad.idNovedad}}" method="POST" enctype="multipart/form-data">
        <div>
            <label for="novedad">Novedad</label>
            <input type="text" name="novedad" id="novedad" value="{{novedad.novedad}}" autofocus required>
        </div>
        <div>
            <label for="imagenUrl">Imagen</label>
            <input type="file" name="imagen" id="imagenUrl" accept="image/*">
            <p>Imagen actual: <img src="{{novedad.imagenUrl}}" alt="Imagen actual" style="max-width: 150px; display: block;"></p>
            <input type="hidden" name="imagenActual" value="{{novedad.imagenUrl}}">
        </div>
        <div>
            <label for="descripcion">Descripcion Resumida</label>
            <textarea name="descripcion" id="descripcion" class="corta" required>{{novedad.descripcion}}</textarea>
        </div>   
        <div>
            <label for="descripcionLarga">Descripcion</label>
            <textarea name="descripcionLarga" id="descripcionLarga" class="larga" required>{{novedad.descripcionLarga}}</textarea>
        </div>                                 
        <button id="updateButton">Actualizar</button>
    </form>

    <div class="modal" id="messageModal">
        <div class="modal-content">
            <h3 id="modalTitle">Mensaje</h3>
            <p id="modalBody"></p>
            <div class="modal-footer">
                <button id="closeModal">Cerrar</button>
            </div>
        </div>
    </div>
</div>


<script>
document.addEventListener("DOMContentLoaded", () => {
  const updateButton = document.getElementById("updateButton");
  const modal = document.getElementById("messageModal");
  const closeModal = document.getElementById("closeModal");
  const modalTitle = document.getElementById("modalTitle");
  const modalBody = document.getElementById("modalBody");
  const form = document.querySelector("form");

  // Función de validación de novedades
  const validateNovedad = ({ novedad, descripcion, descripcionLarga }) => {
    if (!novedad || novedad.length > 50) {
      return "El título no puede superar los 50 caracteres.";
    }
    if (!descripcion || descripcion.length > 70) {
      return "La descripción no puede superar los 70 caracteres.";
    }
    if (!descripcionLarga || descripcionLarga.length < 90) {
      return "La descripción larga debe tener al menos 90 caracteres.";
    }
    return null; // Sin errores
  };

  form.addEventListener("submit", async (e) => {
    e.preventDefault(); // Prevenir recarga de la página

    // Crear un FormData para extraer los datos del formulario
    const formData = new FormData(form);

    // Validar los campos antes de enviar
    const validationError = validateNovedad({
      novedad: formData.get("novedad"),
      descripcion: formData.get("descripcion"),
      descripcionLarga: formData.get("descripcionLarga"),
    });

    if (validationError) {
      modalTitle.textContent = "Error de validación";
      modalBody.textContent = validationError;
      modal.style.display = "flex";
      return;
    }

    try {
      // Enviar los datos al servidor
      const response = await fetch(form.action, {
        method: "POST",
        body: formData,
      });

      if (response.ok) {
        modalTitle.textContent = "Éxito";
        modalBody.textContent = "La novedad se actualizó correctamente.";
        modal.style.display = "flex";

        setTimeout(() => {
          window.location.href = "/novedades"; // Redirigir después de 2 segundos
        }, 2000);
      } else {
        const error = await response.json();
        modalTitle.textContent = "Error";
        modalBody.textContent =
          error.errors?.join(", ") || "Ocurrió un problema al actualizar.";
        modal.style.display = "flex";
      }
    } catch (err) {
      console.error(err);
      modalTitle.textContent = "Error";
      modalBody.textContent = "Hubo un problema con la conexión.";
      modal.style.display = "flex";
    }
  });

  closeModal.addEventListener("click", () => {
    modal.style.display = "none";
    window.location.href = "/novedades";
  });
});
</script>
